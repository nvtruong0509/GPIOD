#define GPIOD_BASE_ADDRESS 0x40020C00
#define GPIOA_BASE_ADDRESS 0x40020000
void led_init()
{
	__HAL_RCC_GPIOD_CLK_ENABLE();
	uint32_t* GPIOD_MODER  = (uint32_t*)(GPIOD_BASE_ADDRESS + 0x00);
	uint32_t* GPIOD_OTYPER = (uint32_t*)(GPIOD_BASE_ADDRESS + 0x04);
	*GPIOD_MODER &= ~(0xff << 24);
	*GPIOD_MODER |= (0b01 << 24) | (0b01 << 26) | (0b01 << 28) | (0b01 << 30);
	*GPIOD_OTYPER &= ~(0xf << 12);
}

void button_init()
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
	uint32_t* GPIOA_MODER  = (uint32_t*)(GPIOA_BASE_ADDRESS + 0x00);
	uint32_t* GPIOA_PUPDR  = (uint32_t*)(GPIOA_BASE_ADDRESS + 0x0C);
	*GPIOA_MODER &= ~(0b11);
	*GPIOA_PUPDR &= ~(0b11);
}

typedef enum
{
	LED_1 = 12, LED_2, LED_3, LED_4
}led_num_t;

typedef enum
{
	LED_OFF, LED_ON
} led_state_t;

void led_ctrl(led_num_t led_num, led_state_t state)
{
	uint32_t* GPIOD_ODR  = (uint32_t*)(GPIOD_BASE_ADDRESS + 0x14);
	if(state == LED_ON)
		*GPIOD_ODR |= (1<<led_num);
	else
		*GPIOD_ODR &= ~(1<<led_num);
}

char get_button()
{
	uint32_t* GPIOA_IDR  = (uint32_t*)(GPIOA_BASE_ADDRESS + 0x10);
	return *GPIOA_IDR & 0b000001;
}
